diff --git a/Makefile b/Makefile
index 39a99d7..6978d95 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..80ffb57 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);    //Offline-3:Scheduling
+int             getpinfo(uint64);   //Offline-3:Scheduling
+void            priorityBoosting(void);     //Offline-3:Scheduling
+void            updateTimeConsumption(void);    //Offline-3:Scheduling
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +191,9 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+
+//Offline-3:Scheduling
+//rand.c
+//  void            init_genrand(unsigned long);
+//  int             genrand_int31(int);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..2bb5cda 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INERVAL 64
+#define DEFAULT_TICKET_COUNT 10
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..e55a88c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,8 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+#include "rand.c"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +126,12 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  //Offline-3:Scheduling
+  p->queue = 1;   
+  p->original_ticket_count = DEFAULT_TICKET_COUNT;
+  p->current_ticket_count = DEFAULT_TICKET_COUNT;
+  p->consumed_time_slots_cur = 0;
+  p->consumed_time_slots_tot = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -322,6 +330,18 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  int tckt;
+  //Offline-3:Scheduling
+  acquire(&p->lock);
+  tckt = p->original_ticket_count;
+  release(&p->lock);
+
+  acquire(&np->lock);
+  np->original_ticket_count = tckt;
+  np->current_ticket_count = tckt;
+  release(&np->lock);
+
+
   return pid;
 }
 
@@ -434,6 +454,78 @@ wait(uint64 addr)
   }
 }
 
+
+
+
+//Offline-3:Scheduling
+//To get the total active tickets for thr processes runnning in queue 1
+int getActiveTickets(){
+  struct proc *p;
+  int tickets = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->state == RUNNABLE && p->queue == 1){
+      tickets += p->current_ticket_count;
+    }
+    release(&p->lock);
+  }
+  return tickets;
+}
+
+
+void updateTimeConsumption(){
+  //Update time consumption in every tick
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNING){
+      p->consumed_time_slots_cur++;
+      p->consumed_time_slots_tot++;
+    }
+    release(&p->lock);
+  }
+}
+
+
+void reInitialize(){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->queue == 1 && p->state == RUNNABLE){
+      //if(p->pid != 0)printf("reinitializing   %d    %d\n",p->pid,p->current_ticket_count);
+      p->current_ticket_count = p->original_ticket_count;
+    }
+    release(&p->lock);
+  }
+}
+
+int isQueue1Empty(){
+  //Returns 1 if empty,returns 0 if not
+  struct proc *p;
+  int flag = 1;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->state == RUNNABLE && p->queue == 1){
+      flag = 0;
+    }
+    release(&p->lock);
+  }
+  return flag;
+}
+
+void priorityBoosting(){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    p->queue = 1;
+    release(&p->lock);
+  }
+}
+
+//dummyproc 45 &; dummyproc 50 &; testprocinfo
+
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -446,29 +538,137 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
-  c->proc = 0;
+  init_genrand(1905101);
+
+  c->proc = 0;    //CPU initially has no process
+
   for(;;){
-    // Avoid deadlock by ensuring that devices can interrupt.
+    //Avoid deadlock by ensuring that devices can interrupt
     intr_on();
 
+    if(!isQueue1Empty()){
+      /*    Now The Lottery-Scheduling starts   */
+      int totalActiveTickets = getActiveTickets();
+      //Check if the Total Active Tickets count is 0 or not.If 0 then reinitialize with their original ticket count
+      if(totalActiveTickets == 0){
+        reInitialize();
+      }
+
+      totalActiveTickets = getActiveTickets();
+      int random = genrand_int31(totalActiveTickets);
+      int sum = 0;
+      int flag = 0;   //This flag indicates whether any process is being scheduled or not
+      for(p = proc; p < &proc[NPROC]; p++){
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->queue == 1){
+          sum += p->current_ticket_count;
+          if(sum >= random && p->current_ticket_count > 0 && flag == 0){
+            flag = 1;    //This lottery scheduling is occupied by this process
+            p->current_ticket_count -= 1;   //Reduce ticket count by 1
+            //printf("LS--pid: %d   queue: %d    cur tkt: %d\n",p->pid,p->queue,p->current_ticket_count);
+            p->consumed_time_slots_cur = 0; //Reset this variable to keep track how much time it has consumed while running
+            p->state = RUNNING;
+            c->proc = p;    
+            swtch(&c->context, &p->context);
+
+            // Process is done running for now.
+            // It should have changed its p->state before coming back.
+            c->proc = 0;
+            
+            //Now check condition 3
+            //If it consumes all the time slices and still RUNNABLE,it is preempted and inserted at the end of the next lower level queue
+            if(p->state == RUNNABLE && p->consumed_time_slots_cur >= TIME_LIMIT_1){
+              //printf("preempted pid: %d\n",p->pid);
+              p->queue = 2; //preempted
+            }
+            p->consumed_time_slots_cur = 0; //Reset
+
+          }
+        }
+        release(&p->lock);
+        if(flag == 1)break; //Already one process is scheduled with this random number
+      }
+
+      if(flag == 1 && !isQueue1Empty()){
+        continue;
+      }
+      if(flag == 0 && !isQueue1Empty()){
+        if(getActiveTickets() == 0)
+          reInitialize();
+        continue;
+      }
+      /*    Lottery-Scheduling Ends    */
+    }
+
+
+  
+
+    /*    Round-Robin starts       */
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if(p->state == RUNNABLE && p->queue == 2) {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
+
+        p->consumed_time_slots_cur = 0;   //Reset        
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
-
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
+        
+
+        if(p->state != RUNNABLE && p->consumed_time_slots_cur < TIME_LIMIT_2){
+          //Voluntarily relinquishes control of the CPU
+          //It's not RUNNABLE,maybe it's SLEEPING 
+          //printf("promoted pid: %d\n",p->pid);
+          p->queue = 1;   //Upgrade
+        }
+        p->consumed_time_slots_cur = 0;   //reset;
+
       }
       release(&p->lock);
+
+      //Now check if queue 1 is nonempty or not
+      if(!isQueue1Empty())break;   //queue-1 is non empty..so go to lottery-scheduling
     }
+    /*     Round-Robin Ends     */
+
+
   }
+
+
+
+
+
+
+  // struct proc *p;
+  // struct cpu *c = mycpu();
+  
+  // c->proc = 0;
+  // for(;;){
+  //   // Avoid deadlock by ensuring that devices can interrupt.
+  //   intr_on();
+
+  //   for(p = proc; p < &proc[NPROC]; p++) {
+  //     acquire(&p->lock);
+  //     if(p->state == RUNNABLE) {
+  //       // Switch to chosen process.  It is the process's job
+  //       // to release its lock and then reacquire it
+  //       // before jumping back to us.
+  //       p->state = RUNNING;
+  //       c->proc = p;
+  //       swtch(&c->context, &p->context);
+
+  //       // Process is done running for now.
+  //       // It should have changed its p->state before coming back.
+  //       c->proc = 0;
+  //     }
+  //     release(&p->lock);
+  //   }
+  // }
 }
 
 // Switch to scheduler.  Must hold only p->lock
@@ -504,6 +704,18 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+
+  //Offline-3:Scheduling
+  if(p->state == RUNNING && p->queue == 1 && p->consumed_time_slots_cur < TIME_LIMIT_1){
+    release(&p->lock);    //Don't forget to release
+    return;
+  }
+
+  if(p->state == RUNNING && p->queue == 2 && p->consumed_time_slots_cur < TIME_LIMIT_2){
+    release(&p->lock);    //Don't forget to release
+    return;
+  }
+
   p->state = RUNNABLE;
   sched();
   release(&p->lock);
@@ -681,3 +893,35 @@ procdump(void)
     printf("\n");
   }
 }
+
+//Offline-3:Scheduling
+int settickets(int tickets){
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->original_ticket_count = tickets;
+  p->current_ticket_count = tickets;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(uint64 address){
+  int cnt = 0;
+  struct pstat stat;
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+
+    acquire(&p->lock);
+    stat.pid[cnt] = p->pid;
+    stat.inuse[cnt] = (p->state != UNUSED);
+    stat.inQ[cnt] = p->queue;
+    stat.tickets_original[cnt] = p->original_ticket_count;
+    stat.tickets_current[cnt] = p->current_ticket_count;
+    stat.time_slices[cnt] = p->consumed_time_slots_tot;
+    release(&p->lock);
+    cnt++;
+  }
+  if(copyout(myproc()->pagetable, address, (char *)&stat, sizeof(stat)) < 0){
+    return -1;
+  }
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..0d10aeb 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  //Offline-3:Scheduling
+  int queue;
+  int original_ticket_count;
+  int current_ticket_count;
+  int consumed_time_slots_cur;
+  int consumed_time_slots_tot;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..e99460c
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat{
+    int pid[NPROC];
+    int inuse[NPROC];
+    int inQ[NPROC];
+    int tickets_original[NPROC];
+    int tickets_current[NPROC];
+    int time_slices[NPROC];
+};
+
+#endif
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..dce5c13
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,121 @@
+/* 
+   A C-program for MT19937, with initialization improved 2002/1/26.
+   Coded by Takuji Nishimura and Makoto Matsumoto.
+
+   Before using, initialize the state by using init_genrand(seed)  
+   or init_by_array(init_key, key_length).
+
+   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
+   All rights reserved.                          
+
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+
+     1. Redistributions of source code must retain the above copyright
+        notice, this list of conditions and the following disclaimer.
+
+     2. Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in the
+        documentation and/or other materials provided with the distribution.
+
+     3. The names of its contributors may not be used to endorse or promote 
+        products derived from this software without specific prior written 
+        permission.
+
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+
+   Any feedback is very welcome.
+   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
+   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
+*/
+
+//#include <stdio.h>
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
+#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializes mt[N] with a seed */
+void init_genrand(unsigned long s)
+{
+    mt[0]= s & 0xffffffffUL;
+    for (mti=1; mti<N; mti++) {
+        mt[mti] = 
+	    (1812433253UL * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti); 
+        /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
+        /* In the previous versions, MSBs of the seed affect   */
+        /* only MSBs of the array mt[].                        */
+        /* 2002/01/09 modified by Makoto Matsumoto             */
+        mt[mti] &= 0xffffffffUL;
+        /* for >32 bit machines */
+    }
+}
+
+/* generates a random number on [0,0xffffffff]-interval */
+unsigned long genrand_int32(void)
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0UL, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if init_genrand() has not been called, */
+            init_genrand(5489UL); /* a default initial seed is used */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1UL];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1UL];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+
+    /* Tempering */
+    y ^= (y >> 11);
+    y ^= (y << 7) & 0x9d2c5680UL;
+    y ^= (y << 15) & 0xefc60000UL;
+    y ^= (y >> 18);
+
+    return y;
+}
+
+/* generates a random number on [0,0x7fffffff]-interval */
+int genrand_int31(int upper)
+{
+    return (int)(((genrand_int32()>>1)%upper)+1);
+}
+
+// int main() {
+//     init_genrand(1905118);
+//     for(int i = 0; i < 15; i++) {
+//         printf("%d\n", genrand_int31(10));
+//     }
+// }
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..a314943 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..935a6f2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"  //Offline-3:Scheduling
 
 uint64
 sys_exit(void)
@@ -89,3 +90,32 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+//Offline-3:Scheduling
+uint64
+sys_settickets(void)
+{
+  int tickets;
+  argint(0,&tickets);
+  if(tickets < 1){
+    settickets(DEFAULT_TICKET_COUNT);
+    return -1;
+  }
+  else{
+    return settickets(tickets);
+  }
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 address;
+  argaddr(0,&address);
+  if(address == 0){
+    return -1;    //Null
+  }
+  return getpinfo(address);
+}
+
+
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..a0a7930 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -166,7 +166,20 @@ clockintr()
   acquire(&tickslock);
   ticks++;
   wakeup(&ticks);
+  
+
+  //Offline-3:Scheduling
+  //Check for Boost interval
+  if(ticks % BOOST_INERVAL == 0){
+    priorityBoosting();
+  }
+
   release(&tickslock);
+
+
+  //Update time consumed by a process
+  updateTimeConsumption();
+  
 }
 
 // check if it's an external interrupt or software interrupt,
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..fa47768
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,27 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc,char *argv[]){
+
+    
+    if( argc != 2){
+        printf("Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+    int ticket = atoi(argv[1]);
+    if (settickets(ticket) < 0) {
+        printf("%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+
+    fork();
+    while(1);
+    // //test fork
+    // if( fork() == 0 ){
+    //     //fork();
+    //     while(1);
+    // }
+    // exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..cfd1325
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+int
+main(int argc,char *argv[]){
+    if(argc > 1){
+        printf("Usage: %s command\n", argv[0]);
+        exit(1);
+    }
+    struct pstat pst;
+    if (getpinfo(&pst) < 0) {
+        printf("%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    printf("PID | In Use | inQ | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0;i<NPROC;i++){
+        if(pst.pid[i]!=0)
+        printf("%d\t%d\t%d\t%d\t\t%d\t\t\t%d\n",pst.pid[i],pst.inuse[i],pst.inQ[i],pst.tickets_original[i],pst.tickets_current[i],pst.time_slices[i]);
+        
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..a475f8a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;   //Offline-3:Scheduling
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);      //Offline-3:Scheduling
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
